/* Auto-generated by genmsg_cpp for file /home/robotlab/fuerte_workspace/drone_movement/msg/UInt8.msg */
#ifndef DRONE_MOVEMENT_MESSAGE_UINT8_H
#define DRONE_MOVEMENT_MESSAGE_UINT8_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace drone_movement
{
template <class ContainerAllocator>
struct UInt8_ {
  typedef UInt8_<ContainerAllocator> Type;

  UInt8_()
  : data(0)
  {
  }

  UInt8_(const ContainerAllocator& _alloc)
  : data(0)
  {
  }

  typedef uint8_t _data_type;
  uint8_t data;


  typedef boost::shared_ptr< ::drone_movement::UInt8_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_movement::UInt8_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UInt8
typedef  ::drone_movement::UInt8_<std::allocator<void> > UInt8;

typedef boost::shared_ptr< ::drone_movement::UInt8> UInt8Ptr;
typedef boost::shared_ptr< ::drone_movement::UInt8 const> UInt8ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::drone_movement::UInt8_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::drone_movement::UInt8_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace drone_movement

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::drone_movement::UInt8_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::drone_movement::UInt8_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::drone_movement::UInt8_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7c8164229e7d2c17eb95e9231617fdee";
  }

  static const char* value(const  ::drone_movement::UInt8_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7c8164229e7d2c17ULL;
  static const uint64_t static_value2 = 0xeb95e9231617fdeeULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_movement::UInt8_<ContainerAllocator> > {
  static const char* value() 
  {
    return "drone_movement/UInt8";
  }

  static const char* value(const  ::drone_movement::UInt8_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::drone_movement::UInt8_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 data\n\
\n\
";
  }

  static const char* value(const  ::drone_movement::UInt8_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::drone_movement::UInt8_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::drone_movement::UInt8_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UInt8_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_movement::UInt8_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::drone_movement::UInt8_<ContainerAllocator> & v) 
  {
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DRONE_MOVEMENT_MESSAGE_UINT8_H

